fulladder(a,b,c) = (s, r) where
  s = (a ^ b) ^ c;
  r = (a & b) + ((a ^ b) & c);
end where

adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where
  if n = 0 then
    o = [];
    c_out = 0
  else
    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);
    (s_n, c_out) = fulladder(a[0], b[0], c_n1);
    o = s_n . s_n1
  end if
end where

ShiftLeft<n>(input:[32]) = output:[32] where
	if n = 0 then 
		output = input
	else
		output = ShiftLeft<n-1>(input[1..31] . 0)
	end if
end where

ShiftRightLogical<n>(input:[32]) = output:[32] where
	if n = 0 then
		output = input
	else
		output = ShiftRightLogical<n-1>(0 . input[..30])
	end if
end where

Repeat<n>(a) = (b:[n]) where
  if n = 0 then
    b = []
  else
    b = a . Repeat<n-1>(a)
  end if
end where

adder2<n>(a:[n], b:[n]) = (o:[n]) where
  (o, c) = adder<n>(a, b, 0)
end where

Mult_scalaire<k>(a:[16], b) = (c:[32]) where
	c = ShiftLeft<k>(Repeat<16>(0) . (adder2<16>(Repeat<16>(b), a)))
end where 

Mult<k>(a:[16], b:[16], c:[32]) = (d:[32]) where
	if k = 16 then 
		d = c
  else 
    c0 = adder2<32>(c, Mult_scalaire<k>(a, b[(15-k)]));
    d = Mult<k+1>(a, b, c0); 
  end if
end where

Multu_16(a:[16], b:[16]) = c:[32] where
  k = Repeat<32>(0);
  c = Mult<0>(a, b, k);
end where 
	
main(a:[32], b:[32]) = (c:[32], d:[32]) where
  a1 = a[..15];
  a2 = a[16..];
  b1 = b[..15];
  b2 = b[16..];
  c1 = Multu_16(a1, b1);
  c2 = Multu_16(a2, b1);
  c3 = Multu_16(a1, b2);
  c4 = Multu_16(a2, b2);
  c_2 = ShiftRightLogical<16>(c2);
  d_2 = ShiftLeft<16>(c2);
  c_3 = ShiftRightLogical<16>(c3);
	d_3 = ShiftLeft<16>(c3);
  c = adder2<32>(adder2<32>(c1, c_2), c_3);
  d = adder2<32>(adder2<32>(c4, d_2), d_3);
end where
