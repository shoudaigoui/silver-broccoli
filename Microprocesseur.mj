Repeat<n>(a) = (b:[n]) where
  if n = 0 then
    b = []
  else
    b = a . Repeat<n-1>(a)
  end if
end where

Extension_de_signe<n>(input:[32-n]) = (output:[32]) where
	if n = 0 then
		output = input
	else
		x = input[0] . input;
		output = Extension_de_signe<n-1>(x)
	end if
end where

ShiftLeft<n>(input:[32]) = output:[32] where
	if n = 0 then 
		output = input
	else
		output = ShiftLeft<n-1>(input[1..31] . 0)
	end if
end where

(* Attention à la convention choisie pour le mux *)
Nmux<n>(a, b:[n], c:[n]) = (d:[n]) where
	if n = 1 then
		d = mux(a,b,c)
	else
		d = Nmux<n-1>(a, b[1..], c[1..]) . mux(a, b[0], c[0])
	end if
end where

(* ALU *)

fulladder(a, b, c) = (s, r) where
  s = (a ^ b) ^ c;
  r = (a & b) + ((a ^ b) & c);
end where

adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where
  if n = 0 then
    o = [];
    c_out = 0
  else
    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);
    (s_n, c_out) = fulladder(a[0], b[0], c_n1);
    o = s_n . s_n1
  end if
end where

And<n>(a:[n],b:[n]) = (c:[n]) where
	if n = 0 then
		c = []
	else		
		c0 = a[0] & b[0];
		c1 = And<n-1>(a[1..],b[1..]);
		c = c0 . c1
	end if
end where

Or<n>(a:[n], b:[n]) = (c:[n]) where
  if n = 0 then
    c = []
  else
    c1 = Or<n-1>(a[1..], b[1..]);
    c0 = a[0] + b[0];
    c = c0 . c1
  end if
end where

Not<n>(a:[n]) = (o:[n]) where
	if n = 0 then
		o = []
	else
		o = (not (a[0])) . Not<n-1>(a[1..n-1])
	end if
end where

Opp<n>(a:[n]) = (o:[n]) where
  if n = 0 then
    o = []
  else
    o1 = Not<n>(a) ;
    o2 = Repeat<n-1>(0) . 1;
    (o, l) = adder<n>(o1, o2, 0)
  end if
end where

Eq_bit(a, b) = (o) where
  o = not (a ^ b)
end where

Eq<n>(a:[n], b:[n]) = (o) where
  if n = 1 then
    o = Eq_bit(a[0], b[0])
  else
    o1 = Eq_bit(a[0], b[0]);
    o2 = Eq<n-1>(a[1..], b[1..]);
    o = o1 & o2
  end if
end where

ALU(a: [32], b:[32], op:[2]) = (o:[32], r, c) where
  (o_add, c_add) = adder<32>(a, b, 0);
  opp_b = Opp<32>(b);
  (o_sub, c_sub) = adder<32>(a, opp_b, 0);
  o_or = Or<32>(a, b);
  o_and = And<32>(a, b);
  fl_eq = Eq<32>(a, b);
  fl_neq = not fl_eq;
  o_add_sub = Nmux<32>(op[1], o_sub, o_add);
  o_and_or = Nmux<32>(op[1], o_or, o_and);
  o = Nmux<32>(op[0], o_and_or, o_add_sub);
  r = mux(op[1], fl_neq, fl_eq);
  c = mux(op[1], c_sub, c_add);
end where

MainControl(opcode:[6]) = 
  (RegDst, Branch, Jump, MemWrite, MemtoReg, ALUSrc, RegWrite, ALUOp:[2]) where
  RegDst = not (opcode[0] + opcode[2] + opcode[3] + opcode[4] + opcode[5]);
  Branch = opcode[3];
  Jump = opcode[4] & (not opcode[5]);
  MemWrite = opcode[0] & opcode[2];
  MemtoReg = opcode[0] & (not opcode[2]);
  ALUSrc = opcode[2];
  RegWrite = RegDst + MemtoReg + (ALUSrc & (not MemWrite));
  b1 = opcode[0] + opcode[1] + opcode[2];
  b2 = opcode[3] & (not opcode[5]);
  ALUOp0 = b1 + b2;
  ALUOp1 = Branch;
  ALUOp = ALUOp0 . ALUOp1;
  (* Il manque ALUOp *)
end where
  
ALUControl(ALUOp:[2], funcode:[6]) = (ALUcode:[2]) where
  check_funcode = not (ALUOp[0] + ALUOp[1]); (* type R *)
  alu0 = check_funcode & funcode[3];
  b1 = (not ALUOp[0]) & ALUOp[1]; 
  b2 = check_funcode & (funcode[4] ^ funcode[5]);
  alu1 = b1 + b2;
  ALUcode = alu0 . alu1; 
end where

(* Les registres sont mis dans la ram *)
GetRegisters(r1:[5], r2:[5], w:[5], we, data:[32]) = (r1_data:[32], r2_data:[32]) where 
  zeros_25 = Repeat<25>(0);
  addr1 = zeros_25.r1.0.0;
  addr2 = zeros_25.r2.0.0;
  write_addr = zeros_25.w.0.0;
  r1_data = ram<32, 32>(addr1, we, write_addr, data);
  r2_data = ram<32, 32>(addr2, 0, write_addr, data);
end where

Cut(ins:[32]) = 
  (opcode:[6], r1:[5], r2:[5], r3:[5], funcode:[6], imm:[16], jump_addr:[26]) where
  opcode = ins[..5];
  r1 = ins[6..10];
  r2 = ins[11..15];
  r3 = ins[16..20];
  imm = ins[16..];
  funcode = ins[26..];
  jump_addr = ins[6..];
end where

main() = () where

  (* pc *)
  all_zero = Repeat<32>(0);
  pc_addr = Repeat<25>(0).1.1.1.0.0.0.0; (* registre %gp *)
  present_pc = ram<32,32>(pc_addr, 0, all_zero, all_zero);
  quatre = Repeat<29>(0).1.0.0;
  (next_pc, c1) = adder<32>(present_pc, quatre, 0);
 
  (* contrôle principal *)
  ins = rom<32,32>(present_pc);
  (opcode, r1, r2, r3, funcode, imm, jump_addr) = Cut(ins);
  (RegDst, Branch, Jump, MemWrite, MemtoReg, ALUSrc, RegWrite, ALUOp) =
    MainControl(opcode);

  (* l'ALU *)
  R0 = Repeat<5>(0);
  (r1_data, r2_data) = GetRegisters(r1, r2, R0, 0, all_zero);
  imm_value = Extension_de_signe<16>(imm);
  ALU_input2 = Nmux<32>(ALUSrc, imm_value, r2_data);
  ALUcode = ALUControl(ALUOp, funcode);
  (ALU_res, fl, carry) = ALU(r1_data, ALU_input2, ALUcode);

  (* écriture dan la mémoire/les registres *)
  mem_read_data = ram<32,32>(ALU_res, MemWrite, ALU_res, r2_data);
  reg_write_data = Nmux<32>(MemtoReg, mem_read_data, ALU_res);
  reg_write = Nmux<5>(RegDst, r3, r2);
  (c2, c3) = GetRegisters(R0, R0, reg_write, RegWrite, reg_write_data);

  (* branch *)
  (branch_pc, c4) = adder<32>(ShiftLeft<2>(imm_value), present_pc, 0);
  go_branch = Branch & fl;
  new_pc1 = Nmux<32>(go_branch, branch_pc, next_pc);

  (* jump *)
  jump_pc = next_pc[..3].jump_addr.0.0;
  new_pc = Nmux<32>(Jump, jump_pc, new_pc1);

  (* mise à jour de pc *)
  c5 = ram<32, 32>(all_zero, 1, pc_addr, new_pc);

end where
