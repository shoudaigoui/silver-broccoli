(*Pour utiliser la soustraction signé, je vais avoir besoin du Not n bites sûrement et du n-adder*)

Not<n>(a:[n]) = (o:[n]) where
	if n = 0 then
		o = []
	else
		o = (not (a[0])) . Not<n-1>(a[1..n-1]);
	end if
end where

Extension_de_signe<n>(input:[32-n]) = output:[32] where
	if n = 0 then
		output = input
	else
		x = input[0] . input;
		output = Extension_de_signe<n-1>(x)
	end if
end where

fulladder(a,b,c) = (s, r) where
  s = (a ^ b) ^ c;
  r = (a & b) + ((a ^ b) & c);
end where

adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where
  if n = 0 then
    o = [];
    c_out = 0
  else
    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);
    (s_n, c_out) = fulladder(a[0], b[0], c_n1);
    o = s_n . s_n1
  end if
end where



negativisation<n>(input:[n]) = output:[n] where
	x = Not<n>(input);
	un = Extension_de_signe<31>(1);
	(output,c) = adder<n>(x,un,0)
end where

main(input:[32]) = output:[32] where
	output = negativisation<32>(input)
end where
