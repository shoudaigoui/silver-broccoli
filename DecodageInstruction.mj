(*Attention à la convention choisie pour le mux*)
Nmux<n>(a,b:[n],c:[n]) = d:[n] where
	if n = 1 then
		d = mux(a,b,c)
	else
		d = Nmux<n-1>(a,b[1..],c[1..]) . mux(a,b[0],c[0])
	end if
end where

Rajoute_0_devant<n>(input:[32-n]) = output:[32] where
    if n = 0 then
        output = input
    else 
        output = Rajoute_0_devant<n-1>(0 . input)
    end if
end where

interprete_opcode(opcode:[6],rs_val:[32],rt_val:[32],imm_32:[32]) = output:[32] where
    o0 = opcode[0];
    o1 = opcode[1];
    o2 = opcode[2];
    o3 = opcode[3];
    o4 = opcode[4];
    o5 = opcode[5];
    
    (*Mettre les fonctions voulues ici, on le fera quand on assemblera le tout en un seul fichier*)
    b000000 = 0x00000000 (*instructions R pas besoin de ça*) ;
    (*pas de 1*)
    b000010 = 0x00000000 (*jump*) ;
    b000011 = 0x00000000 (*jump and link*) ;
    b000100 = 0x00000000 (*branch on equal*) ;
    b000101 = 0x00000000 (*branch on not equal*) ;
    (*pas de 6 ni de 7*)
    b001000 = 0x00000000 (*Addi*) ;
    b001001 = 0x00000000 (*Addiu*) ;
    b001010 = 0x00000000 (*Set less than imm*) ;
    b001011 = 0x00000000 (*Set less than imm u*) ;
    b001100 = 0x00000000 (*And imm*) ;
    b001101 = 0x00000000 (*Or imm*) ;
    (*pas de e*)
    b001111 = 0x00000000 (*Load upper imm*) ;
    
    b100011 = 0x00000000 (*Load word*) ;
    b100100 = 0x00000000 (*Load Byte u*) ;
    b100101 = 0x00000000 (*Load Halfword u*) ;
    b101000 = 0x00000000 (*Store byte*) ;
    b101001 = 0x00000000 (*Store halfword*) ;
    b101011 = 0x00000000 (*Store word*) ;
    (*Je n'ai pas mis Load linked et Store conditional qui sont dans notre MIPS inutiles ou abérant*)
    
    b00010q6 = Nmux<32>(o5,b000101,b000100) ;
    b00100q6 = Nmux<32>(o5,b001001,b001000) ;
    b00101q6 = Nmux<32>(o5,b001011,b001010) ;
    b00110q6 = Nmux<32>(o5,b001101,b001100) ;
    b10010q6 = Nmux<32>(o5,b100101,b100100) ;
    b10100q6 = Nmux<32>(o5,b101001,b101000) ;
    
    b0010q5 = Nmux<32>(o4,b00101q6,b00100q6) ;
    b0011q5 = Nmux<32>(o4,b001111,b00110q6) ;
    b1010q5 = Nmux<32>(o4,b101011,b10100q6) ;
    
    b001q4 = Nmux<32>(o3,b0011q5,b0010q5) ;
    b100q4 = Nmux<32>(o3,b10010q6,b100011) ;
    
    b00q3 = Nmux<32>(o2,b001q4,b00010q6) ; 
    b10q3 = Nmux<32>(o2,b1010q5,b100q4) ;
    
    output = Nmux<32>(o0,b10q3,b00q3) ;
end where

est_branch(opcode:[6]) = o where
    o = (not opcode[0]) & (not opcode[1]) & (not opcode[2]) & opcode[3] & (not opcode[4])
end where

Decodage_instruction_I(input:[32]) = (rt_32:[32],rt_val:[32],we_registre,new_pc:[32],new_r31:[32],we_pc,we_r31) where
    (*On récupère les différentes parties de l'instruction*)
    imm = input[0..15] ;
    rs = input[21..25] ;
    rt = input[16..20] ;
    opcode = input[26..31] ;
    (*On met les addresses des registres/imm sur 32 bits*)
    rs_32 = Rajoute_0_devant<27>(rs) ;
    rt_32 = Rajoute_0_devant<27>(rt) ;
    imm_32 = Rajoute_0_devant<16>(imm) ;
    (*On récupère les valeurs des registres qui nous interesse*)
    rs_val = ram<32,32>(rs_32,0,rs_32,rs_32) ;
    rt_val = ram<32,32>(rt_32,0,rt_32,rt_32) ;
    (*On interprète les funct*)
    rt_val = interprete_opcode(opcode,rs_val,rt_val,imm_32) ;
    condition = est_branch(opcode);
    rt_32 = Nmux<32>(condition,Rajoute_0_devant<27>(0b11100),rt_32) (*pc*);
    cond_28_29 = opcode[0] & (not opcode[1]) & opcode[2] & (not opcode[3]) & (not opcode[4]) ;
    cond_2b = opcode[0] & (not opcode[1]) & opcode[2] & (not opcode[3]) & opcode[4] & opcode[5] ;
    we_registre = cond_28_29 + cond_2b;
    new_pc = 0x00000000; (*bidon*)
    new_r31 = 0x00000000;
    we_pc = 0;
    we_r31 = 0
end where






Decodage_instruction_J(input:[32]) = (reg_32:[32],reg_val:[32],we_reg,new_pc:[32],new_r31:[32],we_pc,we_r31) where
    pc = Rajoute_0_devant<27>(0b11100);
    pc_val = ram<32,32>(pc,0,pc,pc);
    r31 = Rajoute_0_devant<27>(0b11111);
    r31_val = ram<32,32>(r31,0,r31,r31);
    opcode = input[26..31] ;
    o_jump = 0x00000000 (*jump*) ;
    o_jump_and_link = 0x00000000 (*jump and link*) ;
    cond = opcode[5];
    new_pc = Nmux<32>(cond,o_jump_and_link,o_jump) ;
    new_r31 = Nmux<32>(cond,pc_val,r31_val);
    reg_32 = 0x00000000; (*valeurs bidons*)
    reg_val = 0x00000000;
    we_reg = 0;
    we_pc = 1;
    we_r31 = 1
end where








interprete_funct(funct:[6],rs:[32],rt:[32],shamt:[5]) = output:[32] where
    f0 = funct[0];
    f1 = funct[1];
    f2 = funct[2];
    f3 = funct[3];
    f4 = funct[4];
    f5 = funct[5];
    
    (*Mettre les fonctions voulues ici, on le fera quand on assemblera le tout en un seul fichier*)
    b000000 = 0x00000000 (*shift left logical*) ;
    b000010 = 0x00000000 (*shift right logical*) ;
    b001000 = 0x00000000 (*jump register*) ;
    b011010 = 0x00000000 (*div*) ;
    b011011 = 0x00000000 (*divu*) ;
    b100000 = 0x00000000 (*add*) ;
    b100001 = 0x00000000 (*addu*) ;
    b100010 = 0x00000000 (*sub*) ;
    b100011 = 0x00000000 (*subu*) ;
    b100100 = 0x00000000 (*and*) ;
    b100101 = 0x00000000 (*or*) ;
    b100111 = 0x00000000 (*nor*) ;
    b101010 = 0x00000000 (*set less than*) ;
    b101011 = 0x00000000 (*set less than unsigned*) ;
    (*Je n'ai pas mis Move from hi/lo, Mult et Multu parce qu'ils nous sont inutiles, on verra plus tard si on les rajoute*)
    
    b10000q6 = Nmux<32>(f5,b100001,b100000) ;
    b10001q6 = Nmux<32>(f5,b100011,b100010) ;
    b10010q6 = Nmux<32>(f5,b100101,b100100) ;
    
    b1000q5 = Nmux<32>(f4,b10001q6,b10000q6) ;
    b1001q5 = Nmux<32>(f4,b100111,b10010q6) ;
    
    b000q4 = Nmux<32>(f4,b000010,b000000) ;
    b100q4 = Nmux<32>(f3,b1001q5,b1000q5) ;
    b101q4 = Nmux<32>(f5,b101011,b101010) ;
    
    b00q3 = Nmux<32>(f2,b001000,b000q4) ; 
    b01q3 = Nmux<32>(f5,b011011,b011010) ; (*si ca commence par 01 alors c'est 011010 ou 011011*)
    b10q3 = Nmux<32>(f2,b101q4,b100q4) ;
    
    b0q2 = Nmux<32>(f1,b01q3,b00q3) ;
    
    output = Nmux<32>(f0,b10q3,b0q2) ;
end where
    
Decodage_instruction_R(input:[32]) = (rd_32:[32],rd_val:[32],we_rd,new_pc:[32],new_r31:[32],we_pc,we_r31) where
    (*On récupère les différentes parties de l'instruction*)
	funct = input[0..5] ;
    rs = input[21..25] ;
    rt = input[16..20] ;
    rd = input[11..15] ;
    shamt = input[6..10] ;
    (*On met les addresses des registres sur 32 bits*)
    rs_32 = Rajoute_0_devant<27>(rs) ;
    rt_32 = Rajoute_0_devant<27>(rt) ;
    rd_32 = Rajoute_0_devant<27>(rd) ;
    (*On récupère les valeurs des registres qui nous interesse*)
    rs_val = ram<32,32>(rs_32,0,rs_32,rs_32) ;
    rt_val = ram<32,32>(rt_32,0,rt_32,rt_32) ;
    (*On interprète les funct*)
    rd_val = interprete_funct(funct,rs_val,rt_val,shamt) ;
    we_rd = 1;
    new_pc = 0x00000000; (*valeur bidon, ce ne sera pas modifié*)
    new_r31 = 0x00000000;
    we_pc = 0;
    we_r31 = 0
end where


(*Select est un Mux dans un cas particulier : pour le retour des instructions*)
selection(condition, reg_32_1:[32], reg_val_1:[32], we_reg_1, new_pc_1:[32], new_r31_1:[32], we_pc_1, we_r31_1, reg_32_2:[32], reg_val_2:[32], we_reg_2, new_pc_2:[32], new_r31_2:[32], we_pc_2,we_r31_2) = (reg_32:[32], reg_val:[32], we_reg, new_pc:[32], new_r31:[32], we_pc, we_r31) where 
	reg_32 = Nmux<32>(condition,reg_32_1,reg_32_2);	
	reg_val = Nmux<32>(condition,reg_val_1,reg_val_2);
	we_reg = mux(condition,we_reg_1,we_reg_2);
	new_pc = Nmux<32>(condition,new_pc_1,new_pc_2);
	new_r31 = Nmux<32>(condition,new_r31_1,new_r31_2);
	we_pc = mux(condition,we_pc_1,we_pc_2);
	we_r31 = mux(condition,we_r31_1,we_r31_2)
end where

cond_r(opcode:[6]) = o where
	o = (not opcode[0]) & (not opcode[1]) & (not opcode[2]) & (not opcode[3]) & (not opcode[4]) & (not opcode[5])
end where

cond_j(opcode:[6]) = o where
	o = (not opcode[0]) & (not opcode[1]) & (not opcode[2]) & (not opcode[3]) & opcode[4]
end where

Decodage_instruction(input:[32]) = reg_32:[32] where
	(*Lire l'opcode*)
    	opcode = input[26..31] ;
	(*On interprete le résultat de l'opcode*)
	condition_r = cond_r(opcode);
	condition_j = cond_j(opcode);
	(reg_32_2,reg_val_2,we_reg_2,new_pc_2,new_r31_2,we_pc_2,we_r31_2) = Decodage_instruction_I(input);
	(reg_32_1,reg_val_1,we_reg_1,new_pc_1,new_r31_1,we_pc_1,we_r31_1) = Decodage_instruction_J(input);

	(reg_32_3,reg_val_3,we_reg_3,new_pc_3,new_r31_3,we_pc_3,we_r31_3) = selection(condition_j, reg_32_1,reg_val_1,we_reg_1,new_pc_1,new_r31_1,we_pc_1,we_r31_1, reg_32_2,reg_val_2,we_reg_2,new_pc_2,new_r31_2,we_pc_2,we_r31_2);
	(reg_32_4,reg_val_4,we_reg_4,new_pc_4,new_r31_4,we_pc_4,we_r31_4) = Decodage_instruction_R(input);
	(reg_32,reg_val,we_reg,new_pc,new_r31,we_pc,we_r31) = selection(condition_r, reg_32_4,reg_val_4,we_reg_4,new_pc_4,new_r31_4,we_pc_4,we_r31_4, reg_32_3,reg_val_3,we_reg_3,new_pc_3,new_r31_3,we_pc_3,we_r31_3);
        (*mettre à jour les registres, en fonction des we*)
end where

main(input:[32]) = reg_32:[32] where
	reg_32 = Decodage_instruction(input);
end where
